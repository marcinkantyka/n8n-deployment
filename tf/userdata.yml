#cloud-config

# Update system packages
package_update: true
package_upgrade: true

# Install required packages
packages:
  - curl
  - wget
  - git
  - nginx
  - certbot
  - python3-certbot-nginx
  - ufw
  - fail2ban

# Create n8n user
users:
  - name: n8n
    system: true
    shell: /bin/bash
    homedir: /home/n8n

# Write configuration files
write_files:
  # n8n environment configuration
  - path: /home/n8n/.env
    permissions: '0600'
    content: |
      # n8n Configuration
      N8N_BASIC_AUTH_ACTIVE=true
      N8N_BASIC_AUTH_USER=${admin_username}
      N8N_BASIC_AUTH_PASSWORD=${admin_password}
      N8N_HOST=0.0.0.0
      N8N_PORT=5678
      N8N_PROTOCOL=http
      N8N_PUSH_BACKEND=websocket  ### connection lost issue
      WEBHOOK_URL=https://${domain_name}/
      GENERIC_TIMEZONE="Europe/Warsaw"


  # n8n systemd service
  - path: /etc/systemd/system/n8n.service
    permissions: '0644'
    content: |
      [Unit]
      Description=n8n workflow automation
      After=network.target

      [Service]
      Type=simple
      User=n8n
      WorkingDirectory=/home/n8n
      EnvironmentFile=/home/n8n/.env
      ExecStart=/usr/local/bin/n8n start
      Restart=on-failure
      RestartSec=5
      StandardOutput=syslog
      StandardError=syslog
      SyslogIdentifier=n8n

      [Install]
      WantedBy=multi-user.target

  # Nginx configuration
  - path: /etc/nginx/sites-available/n8n
    permissions: '0644'
    content: |
      server {
          listen 80;
          server_name ${domain_name};
          
          # Redirect HTTP to HTTPS
          return 301 https://$server_name$request_uri;
      }

      server {
          listen 443 ssl http2;
          server_name ${domain_name};

          # Temporary self-signed certificate (will be replaced by certbot)
          ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
          ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;

          location / {
              proxy_pass http://localhost:5678;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection 'upgrade';
              proxy_set_header Host $http_host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
              proxy_cache_bypass $http_upgrade;
              proxy_set_header Origin $scheme://$http_host;
                  
              proxy_cache off;
              proxy_buffering off;

              # WebSocket support
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "upgrade";
              
              # Increase timeouts for long-running workflows
              proxy_connect_timeout 60s;
              proxy_send_timeout 60s;
              proxy_read_timeout 60s;
          }
      }

  # UFW rules script
  - path: /tmp/setup-firewall.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      ufw default deny incoming
      ufw default allow outgoing
      ufw allow ssh
      ufw allow 'Nginx Full'
      ufw --force enable

runcmd:
  # Install Node.js 18
  - curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
  - apt-get install -y nodejs
  - sleep 5  # Wait for npm to be available??
  
  # Verify npm is available and install n8n globally
  - apt install npm -y
  - which npm || (echo "npm not found, waiting..." && sleep 10)
  - npm install -g n8n

  # Create n8n directory and set permissions (after user creation)
  - mkdir -p /opt/n8n
  - chown -R n8n:n8n /opt/n8n
  - chmod 755 /opt/n8n

  # Set correct ownership for the .env file
  - chown n8n:n8n -R /home/n8n

  # Install n8n in user directory for better permissions
  - sudo -u n8n bash -c 'cd /opt/n8n && npm init -y && npm install n8n'

  # Enable and start n8n service
  - systemctl daemon-reload
  - systemctl enable n8n
  - systemctl start n8n

  # Configure Nginx
  - ln -s /etc/nginx/sites-available/n8n /etc/nginx/sites-enabled/
  - rm -f /etc/nginx/sites-enabled/default
  
  # Generate temporary SSL certificate for nginx to start
  - apt-get install -y ssl-cert
  
  # Test nginx configuration and restart
  - nginx -t && systemctl restart nginx || echo "Nginx config test failed, continuing..."

  # Set up firewall
  - /tmp/setup-firewall.sh

  # Configure fail2ban for additional security
  - systemctl enable fail2ban
  - systemctl start fail2ban

  # Clean up
  - apt-get autoremove -y
  - apt-get autoclean


# Final message
final_message: |
  n8n installation completed!